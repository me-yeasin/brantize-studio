"use client";

import { useEffect, useState } from "react";

// Define the BlogPost interface based on our MongoDB model
interface BlogPost {
  _id: string;
  title: string;
  slug: string;
  excerpt: string;
  categories: string[];
  author: {
    name: string;
    image: string;
  };
  featured: boolean;
  readTime?: string;
  coverImage: string;
  content: string;
  tags: string[];
  publishedAt: string;
  updatedAt: string;
}

export default function Blogs() {
  // View state management
  const [activeView, setActiveView] = useState<"list" | "upload" | "edit">("list");
  const [blogs, setBlogs] = useState<BlogPost[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [editingBlog, setEditingBlog] = useState<BlogPost | null>(null);
  const [deleteModalVisible, setDeleteModalVisible] = useState(false);
  const [blogToDelete, setBlogToDelete] = useState<{ id: string; title: string } | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  
  // Form state
  const [formData, setFormData] = useState<Partial<BlogPost>>({
    title: "",
    excerpt: "",
    categories: [],
    author: {
      name: "",
      image: "/images/authors/default.jpg",
    },
    featured: false,
    readTime: "",
    coverImage: "",
    content: "",
    tags: [],
    slug: "",
  });
  const [tag, setTag] = useState("");
  const [category, setCategory] = useState("");
  const [contentParagraphs, setContentParagraphs] = useState<string[]>([]);
  const [contentParagraph, setContentParagraph] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement
    >
  ) => {
    const { name, value } = e.target;

    if (name === "authorName") {
      setFormData({
        ...formData,
        author: {
          ...formData.author!,
          name: value,
        },
      });
    } else if (name === "authorImage") {
      setFormData({
        ...formData,
        author: {
          ...formData.author!,
          image: value,
        },
      });
    } else {
      setFormData({
        ...formData,
        [name]: value,
      });
    }
  };

  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setFormData({
      ...formData,
      [name]: checked,
    });
  };

  const addTag = () => {
    if (tag && !formData.tags?.includes(tag)) {
      setFormData({
        ...formData,
        tags: [...(formData.tags || []), tag],
      });
      setTag("");
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData({
      ...formData,
      tags: formData.tags?.filter((t) => t !== tagToRemove),
    });
  };

  const addCategory = () => {
    if (category && !formData.categories?.includes(category)) {
      setFormData({
        ...formData,
        categories: [...(formData.categories || []), category],
      });
      setCategory("");
    }
  };

  const removeCategory = (categoryToRemove: string) => {
    setFormData({
      ...formData,
      categories: formData.categories?.filter((c) => c !== categoryToRemove),
    });
  };

  const addContentParagraph = () => {
    if (contentParagraph) {
      setContentParagraphs([...contentParagraphs, contentParagraph]);
      setContentParagraph("");
    }
  };

  const removeContentParagraph = (index: number) => {
    const newParagraphs = [...contentParagraphs];
    newParagraphs.splice(index, 1);
    setContentParagraphs(newParagraphs);
  };

  // Function to fetch all blogs
  const fetchBlogs = async () => {
    try {
      setIsLoading(true);
      const response = await fetch("/api/blogs");
      
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      
      const data = await response.json();
      setBlogs(data.blogs);
    } catch (error) {
      console.error("Error fetching blogs:", error);
      setErrorMessage(
        error instanceof Error
          ? error.message
          : "An unknown error occurred while fetching blogs"
      );
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMessage("");
    setSuccessMessage("");
    setIsSubmitting(true);

    try {
      // Check if we're in edit mode
      const isEditMode = activeView === "edit" && editingBlog;
      
      // Generate a slug from the title if not in edit mode
      const slug = isEditMode 
        ? editingBlog.slug 
        : formData.title
            ?.toLowerCase()
            .replace(/[^\w\s]/gi, "")
            .replace(/\s+/g, "-");

      // Join content paragraphs into a single string with line breaks
      const content = contentParagraphs.join("\n\n");

      // Prepare the blog post data for submission
      const blogPostData = {
        title: formData.title,
        slug: slug,
        excerpt: formData.excerpt,
        content: content,
        coverImage: formData.coverImage,
        author: {
          name: formData.author?.name,
          image: formData.author?.image,
        },
        categories: formData.categories,
        tags: formData.tags,
        featured: formData.featured,
        publishedAt: isEditMode ? editingBlog.publishedAt : new Date(),
        updatedAt: new Date(),
      };

      // Determine the API endpoint and method based on whether we're editing or creating
      const apiUrl = isEditMode 
        ? `/api/blogs/${editingBlog.slug}` 
        : "/api/blogs/create";
      
      const method = isEditMode ? "PUT" : "POST";

      // Send to our API endpoint
      const response = await fetch(apiUrl, {
        method: method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(blogPostData),
      });

      const data = await response.json();
      console.log("API Response:", { status: response.status, data });

      if (!response.ok) {
        // Instead of throwing an error, set the error message state
        setErrorMessage(data.error || `Error ${isEditMode ? 'updating' : 'creating'} blog post`);
        return; // Exit the function early without setting success state
      }

      // Show success message
      setSuccessMessage(`Blog post ${isEditMode ? 'updated' : 'created'} successfully!`);

      // If we were editing, refetch the blogs to update the list
      if (isEditMode) {
        fetchBlogs();
        
        // Go back to list view after a short delay
        setTimeout(() => {
          setEditingBlog(null);
          setSuccessMessage("");
          setErrorMessage("");
          setActiveView("list");
        }, 2000); // Give user time to see success message
      } else {
        // Reset the form if creating a new post
        setFormData({
          title: "",
          excerpt: "",
          categories: [],
          author: {
            name: "",
            image: "/images/authors/default.jpg",
          },
          featured: false,
          readTime: "",
          coverImage: "",
          content: "",
          tags: [],
        slug: "",
      });
      setContentParagraphs([]);
    } catch (error) {
      console.error("Error in blog post submission:", error);
      setErrorMessage(
        error instanceof Error
          ? `Error: ${error.message}`
          : "An unknown error occurred while creating the blog post"
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  // Fetch blogs on component mount
  useEffect(() => {
    fetchBlogs();
  }, []);

  // Function to fetch all blogs
  const fetchBlogs = async () => {
    try {
      setIsLoading(true);
      const response = await fetch("/api/blogs");
      
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      
      const data = await response.json();
      setBlogs(data.blogs);
    } catch (error) {
      console.error("Error fetching blogs:", error);
      setErrorMessage(
        error instanceof Error
          ? error.message
          : "An unknown error occurred while fetching blogs"
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Function to handle edit blog
  const handleEditBlog = async (slug: string) => {
    try {
      // Clear any existing success or error messages
      setSuccessMessage("");
      setErrorMessage("");
      setIsLoading(true);

      // Fetch the complete blog data
      const response = await fetch(`/api/blogs/${slug}`);

      if (!response.ok) {
        throw new Error("Failed to fetch blog details");
      }

      const data = await response.json();
      const blogData = data.blog;

      setEditingBlog(blogData);
      
      // Set form data for editing
      setFormData({
        title: blogData.title || "",
        excerpt: blogData.excerpt || "",
        categories: blogData.categories || [],
        author: {
          name: blogData.author?.name || "",
          image: blogData.author?.image || "/images/authors/default.jpg",
        },
        featured: blogData.featured || false,
        readTime: blogData.readTime || "",
        coverImage: blogData.coverImage || "",
        content: blogData.content || "",
        tags: blogData.tags || [],
        slug: blogData.slug || "",
      });
      
      // Parse content into paragraphs
      const paragraphs = blogData.content ? blogData.content.split("\n\n") : [];
      setContentParagraphs(paragraphs);
      
      // Switch to edit mode
      setActiveView("edit");

      // Scroll to top
      window.scrollTo({ top: 0, behavior: "smooth" });
    } catch (error) {
      console.error("Error fetching blog for edit:", error);
      setErrorMessage(
        error instanceof Error
          ? error.message
          : "Failed to load blog for editing"
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Function to handle delete blog
  const handleDeleteBlog = (blog: BlogPost) => {
    setBlogToDelete({ id: blog._id, title: blog.title });
    setDeleteModalVisible(true);
  };

  // Function to confirm delete
  const confirmDelete = async () => {
    if (!blogToDelete) return;
    
    try {
      setIsDeleting(true);
      const response = await fetch(`/api/blogs/${blogToDelete.id}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      // Remove the deleted blog from the state
      setBlogs(blogs.filter(blog => blog._id !== blogToDelete.id));
      setSuccessMessage(`Blog "${blogToDelete.title}" was deleted successfully`);
      
      // Reset delete state
      setDeleteModalVisible(false);
      setBlogToDelete(null);
    } catch (error) {
      console.error("Error deleting blog:", error);
      setErrorMessage(
        error instanceof Error
          ? error.message
          : "An unknown error occurred while deleting the blog"
      );
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-orbitron font-bold text-white mb-2">
          {activeView === "list" ? "Blog Posts" : 
           activeView === "edit" ? `Edit Blog: ${editingBlog?.title || ""}` : 
           "Create Blog Post"}
        </h1>
        <p className="text-gray-400">
          {activeView === "list" ? "Manage your blog content." : 
           activeView === "edit" ? "Update your existing blog post." : 
           "Create and publish new content for your blog."}
        </p>
      </div>

      {/* Tab Navigation */}
      <div className="flex mb-8 border-b border-gray-700">
        <button
          onClick={() => {
            setSuccessMessage("");
            setErrorMessage("");
            setActiveView("list");
          }}
          className={`px-5 py-2 ${
            activeView === "list"
              ? "bg-gray-700 text-white"
              : "bg-gray-800 text-gray-400"
          } rounded-t-lg transition-colors flex items-center mr-2`}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
            stroke="currentColor"
            className="w-5 h-5 mr-2"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M8.25 6.75h12M8.25 12h12m-12 5.25h12M3.75 6.75h.007v.008H3.75V6.75zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 12h.007v.008H3.75V12zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm-.375 5.25h.007v.008H3.75v-.008zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z"
            />
          </svg>
          Blog List
        </button>
        
        {activeView === "edit" ? (
          <button
            className={`px-5 py-2 bg-gray-700 text-white rounded-t-lg transition-colors flex items-center`}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="w-5 h-5 mr-2"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Z"
              />
            </svg>
            Edit Blog{" "}
            {editingBlog?.title ? `"${editingBlog.title}"` : ""}
          </button>
        ) : (
          <button
            onClick={() => {
              setEditingBlog(null); // Clear any editing state
              setSuccessMessage(""); // Clear success message
              setErrorMessage(""); // Clear error message
              setActiveView("upload");
              
              // Reset form data
              setFormData({
                title: "",
                excerpt: "",
                categories: [],
                author: {
                  name: "",
                  image: "/images/authors/default.jpg",
                },
                featured: false,
                readTime: "",
                coverImage: "",
                content: "",
                tags: [],
                slug: "",
              });
              setContentParagraphs([]);
            }}
            className={`px-5 py-2 ${
              activeView === "upload"
                ? "bg-gray-700 text-white"
                : "bg-gray-800 text-gray-400"
            } rounded-t-lg transition-colors flex items-center`}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="w-5 h-5 mr-2"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            New Blog Post
          </button>
        )}
      </div>

      {successMessage && (
        <div className="mb-6 bg-green-500/20 border border-green-500/50 text-green-400 px-4 py-3 rounded-md">
          {successMessage}
        </div>
      )}

      {errorMessage && (
        <div className="mb-6 bg-red-500/20 border border-red-500/50 text-red-400 px-4 py-3 rounded-md flex flex-col">
          <span className="font-medium">Error:</span>
          <span>{errorMessage}</span>
        </div>
      )}

      {/* Blog List View */}
      {activeView === "list" && (
        <div>
          <div className="mb-6 flex justify-between items-center">
            <div className="flex gap-4 items-center">
              <select className="px-4 py-2.5 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-lime-400 appearance-none w-full sm:w-40">
                <option value="">All Categories</option>
                <option value="technology">Technology</option>
                <option value="design">Design</option>
                <option value="development">Development</option>
                <option value="marketing">Marketing</option>
              </select>

              <select className="px-4 py-2.5 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-lime-400 appearance-none w-full sm:w-40">
                <option value="">All Time</option>
                <option value="today">Today</option>
                <option value="this-week">This Week</option>
                <option value="this-month">This Month</option>
                <option value="this-year">This Year</option>
              </select>
            </div>

            <button
              onClick={() => {
                setSuccessMessage("");
                setErrorMessage("");
                setActiveView("upload");
              }}
              className="px-5 py-2.5 rounded-lg font-medium brand-gradient-for-bg text-gray-900 hover:opacity-90 transition-all flex items-center justify-center"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-5 h-5 mr-2"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 4.5v15m7.5-7.5h-15"
                />
              </svg>
              Create Blog Post
            </button>
          </div>

          {isLoading ? (
            <div className="flex justify-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-lime-400"></div>
            </div>
          ) : blogs.length === 0 ? (
            <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-10 flex flex-col items-center justify-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-16 h-16 text-gray-600 mb-4"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z"
                />
              </svg>
              <h3 className="text-lg font-medium text-white mb-2">
                No Blog Posts Found
              </h3>
              <p className="text-gray-400 mb-4">
                You haven&apos;t created any blog posts yet.
              </p>
              <button
                onClick={() => {
                  setSuccessMessage("");
                  setErrorMessage("");
                  setActiveView("upload");
                }}
                className="px-5 py-2.5 rounded-lg font-medium brand-gradient-for-bg text-gray-900 hover:opacity-90 transition-all"
              >
                Create Your First Blog Post
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 gap-6">
              {blogs.map((blog) => (
                <div 
                  key={blog._id}
                  className="bg-gray-800/50 border border-gray-700 rounded-lg overflow-hidden flex flex-col md:flex-row"
                >
                  <div className="md:w-1/4 h-48 md:h-auto">
                    <img 
                      src={blog.coverImage} 
                      alt={blog.title} 
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="p-6 md:w-3/4 flex flex-col">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <div className="flex gap-2 mb-2">
                          {blog.featured && (
                            <span className="px-2 py-1 text-xs rounded bg-lime-500/20 text-lime-400 border border-lime-500/20">
                              Featured
                            </span>
                          )}
                          {blog.categories && blog.categories.length > 0 && (
                            <span className="px-2 py-1 text-xs rounded bg-indigo-500/20 text-indigo-400 border border-indigo-500/20">
                              {blog.categories[0]}
                            </span>
                          )}
                        </div>
                        <h3 className="text-xl font-medium text-white">{blog.title}</h3>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleEditBlog(blog.slug)}
                          className="p-2 rounded-lg hover:bg-gray-700 transition-colors"
                          title="Edit blog post"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            strokeWidth={1.5}
                            stroke="currentColor"
                            className="w-5 h-5 text-gray-400 hover:text-white"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Z"
                            />
                          </svg>
                        </button>
                        <button
                          onClick={() => handleDeleteBlog(blog)}
                          className="p-2 rounded-lg hover:bg-gray-700 transition-colors"
                          title="Delete blog post"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            strokeWidth={1.5}
                            stroke="currentColor"
                            className="w-5 h-5 text-gray-400 hover:text-red-400"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"
                            />
                          </svg>
                        </button>
                      </div>
                    </div>
                    
                    <p className="text-gray-400 mb-4 line-clamp-2">{blog.excerpt}</p>
                    
                    <div className="flex justify-between items-center mt-auto">
                      <div className="flex items-center">
                        <img 
                          src={blog.author.image} 
                          alt={blog.author.name}
                          className="w-7 h-7 rounded-full mr-2 object-cover"
                        />
                        <span className="text-sm text-gray-400">{blog.author.name}</span>
                      </div>
                      <div className="text-sm text-gray-500">
                        {new Date(blog.publishedAt).toLocaleDateString()}
                        {blog.readTime && ` · ${blog.readTime}`}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {deleteModalVisible && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-gray-800 border border-gray-700 rounded-lg p-6 w-full max-w-md">
            <h3 className="text-xl font-medium text-white mb-4">
              Delete Blog Post
            </h3>
            <p className="text-gray-300 mb-6">
              Are you sure you want to delete &quot;{blogToDelete?.title}&quot;? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-4">
              <button
                onClick={() => {
                  setDeleteModalVisible(false);
                  setBlogToDelete(null);
                }}
                className="px-4 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={confirmDelete}
                className="px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700 transition-colors flex items-center"
                disabled={isDeleting}
              >
                {isDeleting ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Deleting...
                  </>
                ) : (
                  "Delete"
                )}
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Blog Create/Edit Form */}
      {(activeView === "upload" || activeView === "edit") && (
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Title */}
            <div className="col-span-2">
              <label className="block text-gray-300 mb-2">Blog Title</label>
              <input
                type="text"
                name="title"
                value={formData.title}
                onChange={handleInputChange}
                className="w-full p-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-lime-400"
                placeholder="Enter blog title"
                required
              />
          </div>

          {/* Excerpt */}
          <div className="col-span-2">
            <label className="block text-gray-300 mb-2">Excerpt</label>
            <textarea
              name="excerpt"
              value={formData.excerpt}
              onChange={handleInputChange}
              className="w-full p-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-lime-400 min-h-[100px]"
              placeholder="Enter a brief summary of the blog post"
              required
            />
          </div>

          {/* Categories */}
          <div className="col-span-2">
            <label className="block text-gray-300 mb-2">Categories</label>
            <div className="flex mb-2">
              <input
                type="text"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                className="flex-grow p-3 bg-gray-800/50 border border-gray-700 rounded-l-lg text-white focus:outline-none focus:border-lime-400"
                placeholder="Add a category"
              />
              <button
                type="button"
                onClick={addCategory}
                className="px-4 bg-gray-700 rounded-r-lg hover:bg-gray-600 transition-colors"
              >
                Add
              </button>
            </div>
            <div className="flex flex-wrap gap-2 mt-2">
              {formData.categories?.map((cat, i) => (
                <span
                  key={i}
                  className="bg-gray-700 px-3 py-1 rounded-full text-sm flex items-center"
                >
                  {cat}
                  <button
                    type="button"
                    onClick={() => removeCategory(cat)}
                    className="ml-2 text-gray-400 hover:text-red-400"
                  >
                    &times;
                  </button>
                </span>
              ))}
            </div>
          </div>

          {/* Author Name */}
          <div>
            <label className="block text-gray-300 mb-2">Author Name</label>
            <input
              type="text"
              name="authorName"
              value={formData.author?.name}
              onChange={handleInputChange}
              className="w-full p-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-lime-400"
              placeholder="Author name"
              required
            />
          </div>

          {/* Author Image */}
          <div>
            <label className="block text-gray-300 mb-2">Author Image URL</label>
            <input
              type="text"
              name="authorImage"
              value={formData.author?.image}
              onChange={handleInputChange}
              className="w-full p-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-lime-400"
              placeholder="https://example.com/author.jpg"
            />
          </div>

          {/* Featured */}
          <div>
            <div className="flex items-center space-x-3 h-full mt-8">
              <input
                type="checkbox"
                name="featured"
                id="featured"
                checked={formData.featured}
                onChange={handleCheckboxChange}
                className="w-5 h-5 rounded border-gray-700 bg-gray-800/50 text-lime-400 focus:ring-lime-400"
              />
              <label htmlFor="featured" className="text-gray-300">
                Mark as Featured Post
              </label>
            </div>
          </div>

          {/* Read Time */}
          <div>
            <label className="block text-gray-300 mb-2">Read Time</label>
            <input
              type="text"
              name="readTime"
              value={formData.readTime}
              onChange={handleInputChange}
              className="w-full p-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-lime-400"
              placeholder="e.g., 5 min read"
            />
          </div>

          {/* Cover Image */}
          <div className="col-span-2">
            <label className="block text-gray-300 mb-2">Cover Image URL</label>
            <input
              type="url"
              name="coverImage"
              value={formData.coverImage}
              onChange={handleInputChange}
              className="w-full p-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-lime-400"
              placeholder="https://example.com/image.jpg"
              required
            />
          </div>

          {/* Tags */}
          <div className="col-span-2">
            <label className="block text-gray-300 mb-2">Tags</label>
            <div className="flex mb-2">
              <input
                type="text"
                value={tag}
                onChange={(e) => setTag(e.target.value)}
                className="flex-grow p-3 bg-gray-800/50 border border-gray-700 rounded-l-lg text-white focus:outline-none focus:border-lime-400"
                placeholder="Add a tag"
              />
              <button
                type="button"
                onClick={addTag}
                className="px-4 bg-gray-700 rounded-r-lg hover:bg-gray-600 transition-colors"
              >
                Add
              </button>
            </div>
            <div className="flex flex-wrap gap-2 mt-2">
              {formData.tags?.map((t, i) => (
                <span
                  key={i}
                  className="bg-gray-700 px-3 py-1 rounded-full text-sm flex items-center"
                >
                  {t}
                  <button
                    type="button"
                    onClick={() => removeTag(t)}
                    className="ml-2 text-gray-400 hover:text-red-400"
                  >
                    &times;
                  </button>
                </span>
              ))}
            </div>
          </div>

          {/* Content */}
          <div className="col-span-2">
            <label className="block text-gray-300 mb-2">
              Content Paragraphs
            </label>
            <div className="flex mb-2">
              <textarea
                value={contentParagraph}
                onChange={(e) => setContentParagraph(e.target.value)}
                className="flex-grow p-3 bg-gray-800/50 border border-gray-700 rounded-l-lg text-white focus:outline-none focus:border-lime-400 min-h-[100px]"
                placeholder="Write a paragraph for your blog post"
              />
              <button
                type="button"
                onClick={addContentParagraph}
                className="px-4 bg-gray-700 rounded-r-lg hover:bg-gray-600 transition-colors self-stretch flex items-center"
              >
                Add
              </button>
            </div>

            {/* Content Preview */}
            <div className="mt-4 space-y-4">
              <h3 className="text-gray-300 font-semibold">Content Preview:</h3>
              {contentParagraphs.length > 0 ? (
                contentParagraphs.map((paragraph, index) => (
                  <div
                    key={index}
                    className="relative bg-gray-800/30 p-4 rounded-lg border border-gray-700"
                  >
                    <p className="text-gray-300">{paragraph}</p>
                    <button
                      type="button"
                      onClick={() => removeContentParagraph(index)}
                      className="absolute top-2 right-2 text-gray-400 hover:text-red-400"
                    >
                      &times;
                    </button>
                  </div>
                ))
              ) : (
                <p className="text-gray-500 italic">No content added yet.</p>
              )}
            </div>
          </div>
        </div>

        {/* Submit Button */}
        <div className="mt-8">
          <button
            type="submit"
            disabled={isSubmitting}
            className={`px-6 py-3 rounded-full font-medium brand-gradient-for-bg text-gray-900 hover:opacity-90 transition-opacity ${
              isSubmitting ? "opacity-50 cursor-not-allowed" : ""
            }`}
          >
            {isSubmitting ? "Creating Blog Post..." : "Create Blog Post"}
          </button>
        </div>
      </form>
    </div>
  );
}
